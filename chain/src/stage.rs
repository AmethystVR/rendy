

bitflags! {
    /// Pipeline stages flags.
    /// See Vulkan docs for detailed info:
    /// <https://www.khronos.org/registry/vulkan/specs/1.1/html/vkspec.html#synchronization-pipeline-stages>
    /// Man page: <https://www.khronos.org/registry/vulkan/specs/1.1-extensions/man/html/VkPipelineStageFlagBits.html>
    #[repr(transparent)]
    pub struct PipelineStageFlags: u32 {
        /// Specifies the stage of the pipeline where any commands are initially received by the queue.
        const TOP_OF_PIPE = 0x00000001;

        /// Specifies the stage of the pipeline where Draw/DispatchIndirect data structures are consumed. This stage also includes reading commands written by vkCmdProcessCommandsNVX.
        const DRAW_INDIRECT = 0x00000002;

        /// Specifies the stage of the pipeline where vertex and index buffers are consumed.
        const VERTEX_INPUT = 0x00000004;

        /// Specifies the vertex shader stage.
        const VERTEX_SHADER = 0x00000008;

        /// Specifies the tessellation control shader stage.
        const TESSELLATION_CONTROL_SHADER = 0x00000010;

        /// Specifies the tessellation evaluation shader stage.
        const TESSELLATION_EVALUATION_SHADER = 0x00000020;

        /// Specifies the geometry shader stage.
        const GEOMETRY_SHADER = 0x00000040;

        /// Specifies the fragment shader stage.
        const FRAGMENT_SHADER = 0x00000080;

        /// Specifies the stage of the pipeline where early fragment tests
        /// (depth and stencil tests before fragment shading) are performed.
        /// This stage also includes subpass load operations for framebuffer attachments with a depth/stencil format.
        const EARLY_FRAGMENT_TESTS = 0x00000100;

        /// Specifies the stage of the pipeline where late fragment tests
        /// (depth and stencil tests after fragment shading) are performed.
        /// This stage also includes subpass store operations for framebuffer attachments with a depth/stencil format.
        const LATE_FRAGMENT_TESTS = 0x00000200;

        /// Specifies the stage of the pipeline after blending where the final color values are output from the pipeline.
        /// This stage also includes subpass load and store operations and multisample resolve operations for framebuffer attachments with a color format.
        const COLOR_ATTACHMENT_OUTPUT = 0x00000400;

        /// Specifies the execution of a compute shader.
        const COMPUTE_SHADER = 0x00000800;
        
        /// Specifies the execution of copy commands.
        /// This includes the operations resulting from all copy commands, clear commands
        /// (with the exception of vkCmdClearAttachments), and vkCmdCopyQueryPoolResults.
        const TRANSFER = 0x00001000;

        /// Specifies the final stage in the pipeline where operations generated by all commands complete execution.
        const BOTTOM_OF_PIPE = 0x00002000;

        /// Specifies a pseudo-stage indicating execution on the host of reads/writes of device memory.
        /// This stage is not invoked by any commands recorded in a command buffer.
        const HOST = 0x00004000;

        /// Specifies the execution of all graphics pipeline stages, and is equivalent to the logical OR of:
        /// * STAGE_TOP_OF_PIPE
        /// * STAGE_DRAW_INDIRECT
        /// * STAGE_VERTEX_INPUT
        /// * STAGE_VERTEX_SHADER
        /// * STAGE_TESSELLATION_CONTROL_SHADER
        /// * STAGE_TESSELLATION_EVALUATION_SHADER
        /// * STAGE_GEOMETRY_SHADER
        /// * STAGE_FRAGMENT_SHADER
        /// * STAGE_EARLY_FRAGMENT_TESTS
        /// * STAGE_LATE_FRAGMENT_TESTS
        /// * STAGE_COLOR_ATTACHMENT_OUTPUT
        /// * STAGE_BOTTOM_OF_PIPE
        /// * STAGE_CONDITIONAL_RENDERING
        const ALL_GRAPHICS = 0x00008000;

        /// Is equivalent to the logical OR of every other pipeline stage flag that is supported on the queue it is used with.
        const ALL_COMMANDS = 0x00010000;

        /// Specifies the stage of the pipeline where the predicate of conditional rendering is consumed.
        const CONDITIONAL_RENDERING_EXT = 0x00040000;

        /// Specifies the stage of the pipeline where device-side generation of commands via vkCmdProcessCommandsNVX is handled.
        const COMMAND_PROCESS_NVX = 0x00020000;
    }
}

/// Graphics pipeline stage.
#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]
pub enum GraphicsPipelineStage {
    TopOfPipe,
    DrawIndirect,
    VertexInput,
    VertexShader,
    TessellationControlShader,
    TessellationEvaluationShader,
    GeometryShader,
    EarlyFragmentTests,
    FragmentShader,
    LateFragmentTests,
    ColorAttachmentOutput,
    BottomOfPipe,
}

impl From<GraphicsPipelineStage> for PipelineStageFlags {
    fn from(stage: GraphicsPipelineStage) -> Self {
        match stage {
            GraphicsPipelineStage::TopOfPipe => Self::TOP_OF_PIPE,
            GraphicsPipelineStage::DrawIndirect => Self::DRAW_INDIRECT,
            GraphicsPipelineStage::VertexInput => Self::VERTEX_INPUT,
            GraphicsPipelineStage::VertexShader => Self::VERTEX_SHADER,
            GraphicsPipelineStage::TessellationControlShader => Self::TESSELLATION_CONTROL_SHADER,
            GraphicsPipelineStage::TessellationEvaluationShader => Self::TESSELLATION_EVALUATION_SHADER,
            GraphicsPipelineStage::GeometryShader => Self::GEOMETRY_SHADER,
            GraphicsPipelineStage::EarlyFragmentTests => Self::EARLY_FRAGMENT_TESTS,
            GraphicsPipelineStage::FragmentShader => Self::FRAGMENT_SHADER,
            GraphicsPipelineStage::LateFragmentTests => Self::LATE_FRAGMENT_TESTS,
            GraphicsPipelineStage::ColorAttachmentOutput => Self::COLOR_ATTACHMENT_OUTPUT,
            GraphicsPipelineStage::BottomOfPipe => Self::BOTTOM_OF_PIPE,
        }
    }
}

/// Compute pipeline stage.
#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]
pub enum ComputePipelineStage {
    TopOfPipe,
    DrawIndirect,
    ComputeShader,
    BottomOfPipe,
}

impl From<ComputePipelineStage> for PipelineStageFlags {
    fn from(stage: ComputePipelineStage) -> Self {
        match stage {
            ComputePipelineStage::TopOfPipe => Self::TOP_OF_PIPE,
            ComputePipelineStage::DrawIndirect => Self::DRAW_INDIRECT,
            ComputePipelineStage::ComputeShader => Self::COMPUTE_SHADER,
            ComputePipelineStage::BottomOfPipe => Self::BOTTOM_OF_PIPE,
        }
    }
}

/// Transfer pipeline stage.
#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]
pub enum TransferPipelineStage {
    TopOfPipe,
    Transfer,
    BottomOfPipe,
}

impl From<TransferPipelineStage> for PipelineStageFlags {
    fn from(stage: TransferPipelineStage) -> Self {
        match stage {
            TransferPipelineStage::TopOfPipe => Self::TOP_OF_PIPE,
            TransferPipelineStage::Transfer => Self::TRANSFER,
            TransferPipelineStage::BottomOfPipe => Self::BOTTOM_OF_PIPE,
        }
    }
}

#[derive(Copy, Clone, Debug, PartialOrd, Ord, PartialEq, Eq)]
pub struct HostStage;

impl From<HostStage> for PipelineStageFlags {
    fn from(_: HostStage) -> Self {
        PipelineStageFlags::HOST
    }
}
